# Docker Compose for Autoformalize Production Deployment
version: '3.8'

services:
  # Main application service
  autoformalize:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
        VERSION: ${VERSION:-1.0.0}
    image: autoformalize:${VERSION:-latest}
    container_name: autoformalize-app
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - AUTOFORMALIZE_ENV=production
      - AUTOFORMALIZE_LOG_LEVEL=${LOG_LEVEL:-INFO}
      - AUTOFORMALIZE_MAX_WORKERS=${MAX_WORKERS:-4}
      - AUTOFORMALIZE_REDIS_URL=redis://redis:6379
      - AUTOFORMALIZE_DATABASE_URL=postgresql://autoformalize:${DB_PASSWORD}@postgres:5432/autoformalize
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - app_cache:/app/cache
    depends_on:
      - redis
      - postgres
      - prometheus
    networks:
      - autoformalize-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: autoformalize-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    networks:
      - autoformalize-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for persistent data
  postgres:
    image: postgres:15-alpine
    container_name: autoformalize-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=autoformalize
      - POSTGRES_USER=autoformalize
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - autoformalize-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U autoformalize -d autoformalize"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: autoformalize-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - autoformalize-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: autoformalize-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - autoformalize-network
    depends_on:
      - prometheus

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: autoformalize-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - autoformalize
    networks:
      - autoformalize-network

  # Log aggregation with Fluentd
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: autoformalize-fluentd
    restart: unless-stopped
    volumes:
      - ./fluentd/fluent.conf:/fluentd/etc/fluent.conf
      - app_logs:/var/log/autoformalize
      - nginx_logs:/var/log/nginx
    ports:
      - "24224:24224"
    environment:
      - FLUENTD_CONF=fluent.conf
    networks:
      - autoformalize-network

  # Elasticsearch for log storage
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: autoformalize-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - autoformalize-network

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: autoformalize-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - autoformalize-network

  # Backup service
  backup:
    image: postgres:15-alpine
    container_name: autoformalize-backup
    restart: "no"
    volumes:
      - postgres_data:/var/lib/postgresql/data:ro
      - backup_data:/backup
      - ./scripts/backup.sh:/backup.sh
    environment:
      - POSTGRES_DB=autoformalize
      - POSTGRES_USER=autoformalize
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - PGHOST=postgres
    command: /backup.sh
    depends_on:
      - postgres
    networks:
      - autoformalize-network

networks:
  autoformalize-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  app_data:
    driver: local
  app_logs:
    driver: local
  app_cache:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local
  elasticsearch_data:
    driver: local
  backup_data:
    driver: local