# GitHub Actions CI/CD Pipeline for autoformalize-math-lab
# Comprehensive testing, security, and deployment automation

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'  # Daily dependency scan

env:
  PYTHON_DEFAULT_VERSION: "3.11"
  CACHE_VERSION: v1

jobs:
  # Pre-flight checks and dependency caching
  setup:
    name: Setup & Cache
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
    - uses: actions/checkout@v4
    - id: cache-key
      run: echo "key=${{ runner.os }}-${{ env.CACHE_VERSION }}-${{ hashFiles('**/pyproject.toml', '**/requirements.txt') }}" >> $GITHUB_OUTPUT

  # Code quality and security scanning
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
    - uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ needs.setup.outputs.cache-key }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    - name: Code quality checks
      run: |
        ruff check src/ tests/ --output-format=github
        black --check src/ tests/
        isort --check-only src/ tests/
    - name: Type checking
      run: mypy src/ --config-file pyproject.toml
    - name: Security scanning
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Comprehensive testing matrix
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        exclude:
          - os: macos-latest
            python-version: "3.9"
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ needs.setup.outputs.cache-key }}-${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    - name: Run tests with coverage
      run: |
        pytest tests/ -v --tb=short --cov=src/autoformalize --cov-report=xml --cov-report=term -m "not expensive"
    - name: Upload coverage
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == env.PYTHON_DEFAULT_VERSION
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  # Build and package verification
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [quality, test]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
    - name: Build package
      run: |
        python -m pip install --upgrade pip build twine
        python -m build
        twine check dist/*
    - name: Test installation
      run: |
        pip install dist/*.whl
        autoformalize --help
    - uses: actions/upload-artifact@v3
      with:
        name: dist-files
        path: dist/

  # Docker image building and testing
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [quality, test]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Build and test Docker image
      run: |
        docker build -t autoformalize-math-lab:test .
        docker run --rm autoformalize-math-lab:test autoformalize --help

  # Performance and integration tests
  advanced-tests:
    name: Advanced Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [quality, test]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]" pytest-benchmark
    - name: Run performance tests
      run: |
        pytest tests/ -m "performance" --benchmark-only --benchmark-json=benchmark.json || true
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v -m "not expensive"
    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: benchmark-results
        path: benchmark.json

  # Automated dependency updates
  dependency-update:
    name: Dependency Update Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
    - name: Check for dependency updates
      run: |
        pip install pip-tools safety
        pip-compile --upgrade requirements.in || true
        safety check --json --output safety-check.json || true
    - name: Create PR if updates available
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if git diff --quiet; then
          echo "No dependency updates needed"
        else
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout -b automated-dependency-update-$(date +%Y%m%d)
          git add -A
          git commit -m "chore(deps): automated dependency updates"
          git push origin HEAD
          gh pr create --title "ðŸ¤– Automated Dependency Updates" --body "Automated dependency updates from scheduled workflow"
        fi

  # Release automation
  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: [quality, test, build, docker]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
    - name: Build for release
      run: |
        python -m pip install --upgrade pip build twine
        python -m build
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create ${{ github.ref_name }} dist/* --generate-notes

  # Success notification
  notify-success:
    name: Success Notification
    runs-on: ubuntu-latest
    needs: [quality, test, build, docker]
    if: always() && (needs.quality.result == 'success' && needs.test.result == 'success')
    steps:
    - name: Notify success
      run: echo "âœ… All CI/CD checks passed successfully!"