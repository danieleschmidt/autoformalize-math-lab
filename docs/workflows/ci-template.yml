# GitHub Actions CI Template for autoformalize-math-lab
# 
# This file provides a complete CI/CD workflow template.
# Copy to .github/workflows/ci.yml to enable.

name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

env:
  PYTHON_DEFAULT_VERSION: "3.11"

jobs:
  # Job 1: Code Quality and Linting
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: Run pre-commit hooks
      uses: pre-commit/action@v3.0.0
      
    - name: Type checking with mypy
      run: |
        mypy src/ --config-file pyproject.toml
        
    - name: Security scan with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json
        bandit -r src/  # Also output to console
        
    - name: Upload bandit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

  # Job 2: Testing Matrix
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix size - test fewer combinations on non-Linux
          - os: macos-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.10"
          - os: windows-latest
            python-version: "3.9"
          - os: windows-latest
            python-version: "3.10"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/Library/Caches/pip
          ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --tb=short --cov=src/autoformalize --cov-report=xml --cov-report=term
        
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --tb=short -m "not expensive"
        
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == env.PYTHON_DEFAULT_VERSION
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Job 3: Mathematical Verification Tests
  mathematical-tests:
    name: Mathematical Verification
    runs-on: ubuntu-latest
    # Only run on pushes to main or when mathematical content changes
    if: github.event_name == 'push' || contains(github.event.pull_request.changed_files, '.tex') || contains(github.event.pull_request.changed_files, '.lean')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    # Note: Lean 4 installation would go here
    # - name: Install Lean 4
    #   run: |
    #     curl -sSf https://raw.githubusercontent.com/leanprover/elan/master/elan-init.sh | sh -s -- -y
    #     echo "$HOME/.elan/bin" >> $GITHUB_PATH
        
    - name: Run mathematical tests
      run: |
        pytest tests/ -m "mathematical" -v --tb=short
        
    - name: Run notation consistency checks
      run: |
        python scripts/check_math_notation.py src/ tests/
        
    # Placeholder for proof verification when implemented
    # - name: Verify Lean proofs
    #   run: |
    #     lake build
    #     lake test

  # Job 4: Security and Dependency Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit
        
    - name: Run safety check
      run: |
        safety check --json --output safety-report.json
        safety check  # Also output to console
      continue-on-error: true
        
    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json
        pip-audit  # Also output to console
      continue-on-error: true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          pip-audit-report.json

  # Job 5: Build and Package Testing
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [quality, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip build twine
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        twine check dist/*
        
    - name: Test installation
      run: |
        pip install dist/*.whl
        autoformalize --help
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-files
        path: dist/

  # Job 6: Documentation Build
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"
        
    # Placeholder for when docs/ is implemented
    # - name: Build documentation
    #   run: |
    #     cd docs/
    #     make html
        
    # - name: Upload documentation
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: documentation
    #     path: docs/_build/html/

  # Job 7: End-to-End Tests (Expensive)
  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [quality, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: Run E2E tests
      run: |
        pytest tests/e2e/ -v --tb=short -m "not expensive"
      env:
        # Use test API keys - these should be configured in repository secrets
        OPENAI_API_KEY: ${{ secrets.OPENAI_TEST_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_TEST_API_KEY }}

  # Job 8: Performance Regression Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]" pytest-benchmark
        
    - name: Run performance tests
      run: |
        pytest tests/ -m "performance" --benchmark-only --benchmark-json=benchmark-results.json
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark-results.json

# Notification job (runs always, reports overall status)
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [quality, test, mathematical-tests, security, build, docs]
    if: always() && (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
    - name: Notify success
      if: ${{ needs.quality.result == 'success' && needs.test.result == 'success' && needs.build.result == 'success' }}
      run: |
        echo "✅ All CI checks passed successfully!"
        
    - name: Notify failure
      if: ${{ needs.quality.result == 'failure' || needs.test.result == 'failure' || needs.build.result == 'failure' }}
      run: |
        echo "❌ Some CI checks failed. Please review the results."
        exit 1