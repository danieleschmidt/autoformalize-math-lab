[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "autoformalize-math-lab"
version = "0.1.0"
description = "An LLM-driven auto-formalization workbench that converts LaTeX proofs into Lean4/Isabelle"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
maintainers = [
    {name = "Your Name", email = "your.email@example.com"},
]
keywords = [
    "mathematics",
    "formal-verification",
    "proof-assistants",
    "lean4",
    "isabelle",
    "coq",
    "latex",
    "llm",
    "ai",
    "formalization",
    "theorem-proving"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Text Processing :: Markup :: LaTeX",
]
requires-python = ">=3.9"
dependencies = [
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "pandas>=2.0.0",
    "openai>=1.0.0",
    "anthropic>=0.25.0",
    "transformers>=4.30.0",
    "torch>=2.0.0",
    "nltk>=3.8",
    "spacy>=3.6.0",
    "regex>=2023.5.5",
    "markdown>=3.4.0",
    "beautifulsoup4>=4.12.0",
    "pylatexenc>=2.10",
    "latexcodec>=2.0.1",
    "PyPDF2>=3.0.0",
    "pymupdf>=1.23.0",
    "sympy>=1.12",
    "pexpect>=4.8.0",
    "requests>=2.31.0",
    "httpx>=0.24.0",
    "fastapi>=0.100.0",
    "uvicorn>=0.23.0",
    "python-dotenv>=1.0.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "click>=8.1.0",
    "rich>=13.0.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.11.0",
    "redis>=4.6.0",
    "aiofiles>=23.0.0",
    "aiohttp>=3.8.0",
    "celery>=5.3.0",
    "loguru>=0.7.0",
    "prometheus-client>=0.17.0",
    "sentry-sdk>=1.28.0",
    "tqdm>=4.65.0",
    "colorama>=0.4.6",
    "typing-extensions>=4.7.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "hypothesis>=6.80.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "bandit>=1.7.5",
    "safety>=3.0.0",
    "pip-audit>=2.6.0",
    "line-profiler>=4.0.0",
    "memory-profiler>=0.61.0",
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "nbsphinx>=0.9.0",
]
lean = [
    # Placeholder for Lean 4 Python bindings when available
]
isabelle = [
    # Placeholder for Isabelle Python interface when available
]
coq = [
    # Placeholder for Coq Python integration when available
]
all = [
    "autoformalize-math-lab[dev,docs,lean,isabelle,coq]",
]

[project.urls]
Homepage = "https://github.com/yourusername/autoformalize-math-lab"
Repository = "https://github.com/yourusername/autoformalize-math-lab.git"
Documentation = "https://autoformalize-math.readthedocs.io"
"Bug Tracker" = "https://github.com/yourusername/autoformalize-math-lab/issues"
Changelog = "https://github.com/yourusername/autoformalize-math-lab/blob/main/CHANGELOG.md"

[project.scripts]
autoformalize = "autoformalize.cli:main"

[project.entry-points."autoformalize.plugins"]
lean4 = "autoformalize.generators.lean:Lean4Generator"
isabelle = "autoformalize.generators.isabelle:IsabelleGenerator"
coq = "autoformalize.generators.coq:CoqGenerator"

[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]
exclude = ["tests*"]

[tool.setuptools.package-data]
"autoformalize" = [
    "data/**/*",
    "templates/**/*",
    "prompts/**/*",
    "config/**/*",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    # Directories
    \.eggs
  | \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | lake-packages
  | \.lake
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["lake-packages/**", ".lake/**"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "numpy.*",
    "scipy.*",
    "pandas.*",
    "matplotlib.*",
    "sympy.*",
    "transformers.*",
    "torch.*",
    "openai.*",
    "anthropic.*",
    "nltk.*",
    "spacy.*",
    "pexpect.*",
    "pymupdf.*",
    "PyPDF2.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m "not slow"')",
    "integration: marks tests as integration tests",
    "mathematical: marks tests that verify mathematical correctness",
    "lean: marks tests specific to Lean 4",
    "isabelle: marks tests specific to Isabelle/HOL",
    "coq: marks tests specific to Coq",
    "llm: marks tests that require LLM API access",
    "expensive: marks tests that consume significant resources",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__main__.py",
    "*/setup.py",
    "*/venv/*",
    "*/.venv/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]

# Ruff configuration (alternative to flake8)
[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
line-length = 88
target-version = "py39"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # ignore unused imports in __init__.py
"tests/**/*.py" = ["S101"]  # ignore assert usage in tests